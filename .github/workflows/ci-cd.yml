name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  actions: read
  security-events: write

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest

    services: # use GitHub Actions service containers
      redis:
        image: redis:latest
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # Optional: install test deps, e.g. pytest, flake8
          pip install pytest

      - name: Run Lint
        run: |
          # Skip/lint example as needed
          echo "Linting step here"
          # flake8 src/

      - name: Run Tests
        env:
          REDIS_HOST: localhost
          REDIS_PORT: 6379
        run: |
          pytest tests/

  # analyze:
  #   name: Analyze
  #   needs: build-test-deploy
  #   runs-on: ubuntu-latest
  #   permissions:
  #     actions: read      # enable read permissions for the actions API
  #     contents: read
  #   env:
  #     GH_TOKEN: ${{ secrets.MY_PAT }}
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Initialize CodeQL
  #       uses: github/codeql-action/init@v3
  #       with:
  #         languages: python
  #     - name: Autobuild
  #       uses: github/codeql-action/autobuild@v3
  #     - name: Perform CodeQL Analysis
  #       uses: github/codeql-action/analyze@v3
  #       with:
  #         category: '/language:python'

  docker_security_scan:
    runs-on: ubuntu-latest
    needs: build-test-deploy
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build -t my-app:${{ github.sha }} .

      - name: Trivy vulnerability scan
        uses: aquasecurity/trivy-action@0.30.0
        with:
          image-ref: 'my-app:${{ github.sha }}'
          format: 'sarif'
          severity: 'CRITICAL,HIGH'
          output: 'trivy-results.sarif'
          exit-code: 0 # Allows the workflow to continue even if vulnerabilities are found

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'



  docker-run-test:
    needs: docker_security_scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Test Docker container
        run: |
          # Start a Redis container (background)
          docker run -d --name test-redis -p 6379:6379 redis:latest

          # Start your app container, link to Redis
          docker run -d --name test-app --link test-redis:redis -e REDIS_HOST=redis -p 5000:5000 ghcr.io/${{ github.repository }}:latest

          # Wait for app to start up (tune as needed)
          sleep 5

          # Test the / endpoint
          curl -f http://localhost:5000/ || (docker logs test-app && exit 1)

          # Post-test cleanup
          docker stop test-app test-redis
          docker rm test-app test-redis

  docker-push:
    needs: docker-run-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -t ghcr.io/${{ github.repository }}:${{ github.run_id }} .

      # Example: DockerHub login and push
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push Docker image
        run: |
          docker tag ghcr.io/${{ github.repository }}:${{ github.run_id }} ${{ secrets.DOCKERHUB_USERNAME }}/gh-python-redis:${{ github.run_id }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/gh-python-redis:${{ github.run_id }}

      # Optional: Deploy on remote (e.g., via SSH to a Docker server)
      # - name: Deploy to server
      #   uses: appleboy/ssh-action@v0.1.10
      #   with:
      #     host: ${{ secrets.SERVER_IP }}
      #     username: ${{ secrets.SERVER_USER }}
      #     key: ${{ secrets.SERVER_SSH_KEY }}
      #     script: |
      #       docker pull ${{ secrets.DOCKERHUB_USERNAME }}/sample-python-redis:latest
      #       docker stop app || true && docker rm app || true
      #       docker run -d --name app -p 80:80 ${{ secrets.DOCKERHUB_USERNAME }}/sample-python-redis:latest

